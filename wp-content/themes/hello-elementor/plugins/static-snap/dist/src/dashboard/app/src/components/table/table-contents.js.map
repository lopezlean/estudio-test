{"version":3,"file":"table-contents.js","sourceRoot":"","sources":["../../../../../../../src/dashboard/app/src/components/table/table-contents.tsx"],"names":[],"mappings":";;;;AAAA,wEAA0C;AAC1C,8EAAgD;AAChD,8EAAgD;AAChD,8EAAgD;AAChD,4EAA8C;AAY9C,IAAM,IAAI,GAAG,cAAM,OAAA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,OAAO,CAAC,EAAnC,CAAmC,CAAC;AAEvD,IAAM,aAAa,GAAG,UAAC,EAA8C;QAA5C,OAAO,aAAA,EAAE,IAAI,UAAA,EAAE,OAAO,aAAA;IAC7C,OAAO,CACL,6DACE,uBAAC,mBAAS,cACR,wBAAC,kBAAQ,eACN,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,IAAK,OAAA,CACvB,uBAAC,mBAAS,cAAqB,MAAM,CAAC,UAAU,IAAhC,MAAM,CAAC,KAAK,CAAiC,CAC9D,EAFwB,CAExB,CAAC,EAED,OAAO,IAAI,uBAAC,mBAAS,KAAa,IAC1B,GACD,EACZ,uBAAC,mBAAS,cACP,IAAI,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK,IAAK,OAAA,CACxB,wBAAC,kBAAQ,eACN,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,IAAK,OAAA,CACvB,uBAAC,mBAAS,cACP,OAAO,MAAM,CAAC,MAAM,KAAK,UAAU;gCAClC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC;gCAC1C,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,IAHP,MAAM,CAAC,KAAK,CAIhB,CACb,EANwB,CAMxB,CAAC,EACF,uBAAC,mBAAS,cACP,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,GAAG,CAAC,UAAC,EAAiC;gCAA/B,IAAA,UAAU,gBAAA,EAAE,OAAO,aAAA,EAAK,KAAK,sBAA/B,yBAAiC,CAAF;gCAAO,OAAA,CACnD,uBAAC,gBAAM,uBAED,KAAK,IACT,OAAO,EAAE,UAAC,CAAC;wCACT,UAAU,IAAI,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;wCACrC,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC;oCACxB,CAAC,KALI,KAAK,CAAC,EAAE,CAMb,CACH,CAAA;6BAAA,CAAC,GACQ,KAnBC,GAAG,CAAC,EAAE,IAAI,IAAI,EAAE,CAoBpB,CACZ,EAtByB,CAsBzB,CAAC,GACQ,IACX,CACJ,CAAC;AACJ,CAAC,CAAC;AAEF,kBAAe,aAAa,CAAC","sourcesContent":["import Button from '@mui/material/Button';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\n\nimport { ButtonRowProps } from './interfaces/button-row-props';\nimport TableColumnInterface from './interfaces/table-column.interface';\nimport TableRowInterface from './interfaces/table-row.interface';\n\ntype TableContentsProps = {\n  columns: TableColumnInterface[];\n  rows: TableRowInterface[];\n  actions?: ButtonRowProps[];\n};\n\nconst uuid = () => Math.floor(Math.random() * 1000000);\n\nconst TableContents = ({ columns, rows, actions }: TableContentsProps) => {\n  return (\n    <>\n      <TableHead>\n        <TableRow>\n          {columns.map((column) => (\n            <TableCell key={column.field}>{column.headerName}</TableCell>\n          ))}\n\n          {actions && <TableCell></TableCell>}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {rows.map((row, index) => (\n          <TableRow key={row.id || uuid()}>\n            {columns.map((column) => (\n              <TableCell key={column.field}>\n                {typeof column.render === 'function'\n                  ? column.render(row[column.field], column)\n                  : row[column.field]}\n              </TableCell>\n            ))}\n            <TableCell>\n              {actions?.map(({ onRowClick, onClick, ...other }) => (\n                <Button\n                  key={other.id}\n                  {...other}\n                  onClick={(e) => {\n                    onRowClick && onRowClick(row, index);\n                    onClick && onClick(e);\n                  }}\n                />\n              ))}\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </>\n  );\n};\n\nexport default TableContents;\n"]}