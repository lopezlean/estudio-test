{"version":3,"file":"input-for-extension-setting.js","sourceRoot":"","sources":["../../../../../../../src/dashboard/app/src/components/form/input-for-extension-setting.tsx"],"names":[],"mappings":";;;;AAEA,sEAAuC;AACvC,4DAA8B;AAC9B,4DAA8B;AAC9B,oEAAqC;AAOrC,IAAM,yBAAyB,GAAG,UAAC,EAAkD;QAAhD,OAAO,aAAA,EAAE,IAAI,UAAA;IAChD,IAAM,WAAW,GAAG;QAClB,IAAI,OAAO,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YAC7B,OAAO,CACL,uBAAC,gBAAM,IACL,IAAI,EAAE,IAAI,EACV,KAAK,EAAE,OAAO,CAAC,KAAK,EACpB,UAAU,EAAE,OAAO,CAAC,UAAU,EAC9B,KAAK,EAAE,OAAO,CAAC,KAAK,IAAI,EAAE,EAC1B,QAAQ,EAAE,OAAO,CAAC,QAAQ,GAC1B,CACH,CAAC;QACJ,CAAC;QACD,IAAI,OAAO,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YAC5B,OAAO,CACL,uBAAC,oBAAS,IACR,IAAI,EAAE,IAAI,EACV,KAAK,EAAE,OAAO,CAAC,KAAK,EACpB,UAAU,EAAE,OAAO,CAAC,UAAU,EAC9B,QAAQ,EAAE,OAAO,CAAC,QAAQ,GAC1B,CACH,CAAC;QACJ,CAAC;QACD,IAAI,OAAO,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;YAC9B,OAAO,CACL,uBAAC,oBAAS,IACR,IAAI,EAAE,IAAI,EACV,KAAK,EAAE,OAAO,CAAC,KAAK,EACpB,UAAU,EAAE,OAAO,CAAC,UAAU,EAC9B,IAAI,EAAC,QAAQ,EACb,QAAQ,EAAE,OAAO,CAAC,QAAQ,GAC1B,CACH,CAAC;QACJ,CAAC;QACD,WAAW;QACX,IAAI,OAAO,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;YAChC,OAAO,CACL,uBAAC,oBAAS,IACR,IAAI,EAAE,IAAI,EACV,KAAK,EAAE,OAAO,CAAC,KAAK,EACpB,UAAU,EAAE,OAAO,CAAC,UAAU,EAC9B,SAAS,EAAE,IAAI,EACf,IAAI,EAAE,CAAC,EACP,QAAQ,EAAE,OAAO,CAAC,QAAQ,GAC1B,CACH,CAAC;QACJ,CAAC;QACD,IAAI,OAAO,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YAC5B,OAAO,CACL,uBAAC,qBAAU,IACT,IAAI,EAAE,IAAI,EACV,KAAK,EAAE,OAAO,CAAC,KAAK,EACpB,UAAU,EAAE,OAAO,CAAC,UAAU,EAC9B,QAAQ,EAAE,OAAO,CAAC,QAAQ,GAC1B,CACH,CAAC;QACJ,CAAC;QACD,IAAI,OAAO,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;YAC/B,OAAO,uBAAC,gBAAM,IAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,UAAU,EAAE,OAAO,CAAC,UAAU,GAAI,CAAC;QACtF,CAAC;QACD,OAAO,CAAC,KAAK,CAAC,gCAAyB,OAAO,CAAC,IAAI,CAAE,CAAC,CAAC;QACvD,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;IACF,OAAO,WAAW,EAAE,CAAC;AACvB,CAAC,CAAC;AAEF,kBAAe,yBAAyB,CAAC","sourcesContent":["import { ExtensionSettingType } from '@staticsnap/dashboard/interfaces/extension.interface';\n\nimport HtmlEditor from './html-editor';\nimport Select from './select';\nimport Switch from './switch';\nimport TextField from './text-field';\n\ntype InputForEnvironmentSettingProps = {\n  name: string;\n  setting: ExtensionSettingType;\n};\n\nconst InputForExtensionsSetting = ({ setting, name }: InputForEnvironmentSettingProps) => {\n  const renderInput = () => {\n    if (setting.type === 'array') {\n      return (\n        <Select\n          name={name}\n          label={setting.label}\n          helperText={setting.helperText}\n          items={setting.items || []}\n          required={setting.required}\n        />\n      );\n    }\n    if (setting.type === 'text') {\n      return (\n        <TextField\n          name={name}\n          label={setting.label}\n          helperText={setting.helperText}\n          required={setting.required}\n        />\n      );\n    }\n    if (setting.type === 'number') {\n      return (\n        <TextField\n          name={name}\n          label={setting.label}\n          helperText={setting.helperText}\n          type=\"number\"\n          required={setting.required}\n        />\n      );\n    }\n    // textarea\n    if (setting.type === 'textarea') {\n      return (\n        <TextField\n          name={name}\n          label={setting.label}\n          helperText={setting.helperText}\n          multiline={true}\n          rows={4}\n          required={setting.required}\n        />\n      );\n    }\n    if (setting.type === 'html') {\n      return (\n        <HtmlEditor\n          name={name}\n          label={setting.label}\n          helperText={setting.helperText}\n          required={setting.required}\n        />\n      );\n    }\n    if (setting.type === 'boolean') {\n      return <Switch name={name} label={setting.label} helperText={setting.helperText} />;\n    }\n    console.error(`Unknown setting type: ${setting.type}`);\n    return null;\n  };\n  return renderInput();\n};\n\nexport default InputForExtensionsSetting;\n"]}