{"version":3,"file":"algolia.js","sourceRoot":"","sources":["../../src/search/algolia.ts"],"names":[],"mappings":";;;AAEA,wCAAqC;AACrC,wEAA0D;AAE1D,8DAAgC;AAOhC;IAKE,iBAAY,QAAkB;QAC5B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,QAA2B,CAAC;QAClF,IAAI,CAAC,MAAM,GAAG,IAAA,uBAAW,EACvB,IAAI,CAAC,QAAQ,CAAC,sBAAsB,EACpC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CACjC,CAAC;IACJ,CAAC;IACM,yBAAO,GAAd;QACE,OAAO,SAAS,CAAC;IACnB,CAAC;IACY,wBAAM,GAAnB,UAAoB,KAAa;;;;;;wBACzB,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,MAAM,IAAI,IAAI,CAAC;wBAC/C,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,gBAAgB,IAAI,KAAK,CAAC;wBACpE,MAAM,GAAsC,EAAE,CAAC;wBACrD,IAAI,gBAAgB,EAAE,CAAC;4BACrB,MAAM,CAAC,YAAY,GAAG,CAAC,mBAAY,MAAM,CAAE,CAAC,CAAC;wBAC/C,CAAC;wBAEK,eAAe,GAAG;4BACtB;gCACE,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,kBAAkB;gCAC3C,MAAM,EAAE,MAAM;gCACd,KAAK,OAAA;6BACN;yBACF,CAAC;;;;wBAGO,qBAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,EAAA;4BAAhD,sBAAO,SAAyC,EAAC;;;wBAEjD,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,oBAAoB,EAAE,CAAC;4BAC1C,OAAO,GAAI,OAAe,CAAC,OAAO,CAAC;4BACzC,KAAK,CACH,IAAA,SAAE,EACA,6GAAsG,OAAO,CAAE,CAChH,CACF,CAAC;wBACJ,CAAC;wBACD,sBAAO,EAAE,OAAO,EAAE,EAAE,EAAE,EAAC;;;;;KAE1B;IACM,+BAAa,GAApB,UAAqB,MAAmB,EAAE,OAA8C;;QACtF,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YACrB,OAAO;QACT,CAAC;QACD,IAAM,QAAQ,GAAG,MAAA,QAAQ,CAAC,cAAc,CAAC,oCAAoC,CAAC,0CAAE,SAAS,CAAC;QAE1F,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO;QACT,CAAC;QAED,IAAM,QAAQ,GAAG,kBAAQ,CAAC;QAC1B,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,KAAqB,UAAe,EAAf,KAAA,OAAO,CAAC,OAAO,EAAf,cAAe,EAAf,IAAe,EAAE,CAAC;YAAlC,IAAM,MAAM,SAAA;YACf,IAAM,IAAI,GAAI,MAAuC,CAAC,IAAI,CAAC;YAC3D,IAAM,QAAQ,GAAG,IAAI;iBAClB,GAAG,CAAC,UAAC,GAAG;gBACP,OAAO,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;YACxC,CAAC,CAAC;iBACD,IAAI,CAAC,EAAE,CAAC,CAAC;YACZ,IAAI,IAAI,MAAM,GAAG,QAAQ,GAAG,OAAO,CAAC;QACtC,CAAC;QAED,MAAM,CAAC,SAAS,GAAG,MAAM,GAAG,IAAI,GAAG,OAAO,CAAC;IAC7C,CAAC;IACH,cAAC;AAAD,CAAC,AAtED,IAsEC;AAED,kBAAe,OAAO,CAAC","sourcesContent":["import { MultipleQueriesResponse } from '@algolia/client-search';\nimport { Frontend, SearchModuleInterface } from '@staticsnap/frontend';\nimport { __ } from '@wordpress/i18n';\nimport initAlgolia, { SearchClient } from 'algoliasearch';\nimport { SearchResponse } from 'instantsearch.js';\nimport Mustache from 'mustache';\n\ntype AlgoliaSettings = {\n  algolia_application_id: string;\n  algolia_search_key: string;\n  algolia_index_name: string;\n};\nclass Algolia implements SearchModuleInterface {\n  private client: SearchClient;\n  private frontend: Frontend;\n  private settings: AlgoliaSettings;\n\n  constructor(frontend: Frontend) {\n    this.frontend = frontend;\n    this.settings = this.frontend.config().options.search.settings as AlgoliaSettings;\n    this.client = initAlgolia(\n      this.settings.algolia_application_id,\n      this.settings.algolia_search_key\n    );\n  }\n  public getType(): string {\n    return 'algolia';\n  }\n  public async search(query: string): Promise<MultipleQueriesResponse<DocumentType>> {\n    const locale = this.frontend.config().locale || null;\n    const has_translations = this.frontend.config().has_translations || false;\n    const params: Record<string, string[] | string> = {};\n    if (has_translations) {\n      params.facetFilters = [`language:${locale}`];\n    }\n\n    const multipleQueries = [\n      {\n        indexName: this.settings.algolia_index_name,\n        params: params,\n        query,\n      },\n    ];\n\n    try {\n      return await this.client.search(multipleQueries);\n    } catch (error: unknown) {\n      if (this.frontend.config().is_admin_bar_showing) {\n        const message = (error as Error).message;\n        alert(\n          __(\n            `You must run a deployment to index the content for first time when you are using wordpress. Error: ${message}`\n          )\n        );\n      }\n      return { results: [] };\n    }\n  }\n  public renderResults(target: HTMLElement, results: MultipleQueriesResponse<DocumentType>): void {\n    if (!results.results) {\n      return;\n    }\n    const template = document.getElementById('static-snap-search-result-template')?.innerHTML;\n\n    if (!template) {\n      return;\n    }\n\n    const rendered = Mustache;\n    let html = '';\n    for (const result of results.results) {\n      const hits = (result as SearchResponse<DocumentType>).hits;\n      const itemHtml = hits\n        .map((hit) => {\n          return rendered.render(template, hit);\n        })\n        .join('');\n      html += '<li>' + itemHtml + '</li>';\n    }\n\n    target.innerHTML = '<ol>' + html + '</ol>';\n  }\n}\n\nexport default Algolia;\n"]}